<?php
/**
 *  Autoloader function generated by crodas/Autoloader
 *
 *  https://github.com/crodas/Autoloader
 *
 *  This is a generated file, do not modify it.
 */

return function($class) {
    // classes {{{
    static $classes = array (
  'symfony\\component\\finder\\tests\\iterator\\sizerangefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/SizeRangeFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/RealIteratorTestCase.php',
  'symfony\\component\\finder\\tests\\iterator\\innersizeiterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/SizeRangeFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\iterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/Iterator.php',
  'symfony\\component\\finder\\tests\\iterator\\sortableiteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/SortableIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\recursivedirectoryiteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/RecursiveDirectoryIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\iteratortestcase' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/IteratorTestCase.php',
  'symfony\\component\\finder\\tests\\iterator\\filetypefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FileTypeFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\innertypeiterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FileTypeFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\filenamefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilenameFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\innernameiterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilenameFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\filecontentfilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilecontentFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\mocksplfileinfo' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilecontentFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\mockfilelistiterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilecontentFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\filteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/FilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\multiplepcrefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/MultiplePcreFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\testmultiplepcrefilteriterator' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/MultiplePcreFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\excludedirectoryfilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/ExcludeDirectoryFileIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\depthrangefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/DepthRangeIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\customfilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/CustomFilterIteratorTest.php',
  'symfony\\component\\finder\\tests\\iterator\\daterangefilteriteratortest' => '/../symfony/finder/Symfony/Component/Finder/Tests/Iterator/DateRangeFilterIteratorTest.php',
  'symfony\\component\\finder\\iterator\\filteriterator' => '/../symfony/finder/Symfony/Component/Finder/Iterator/FilterIterator.php',
  'symfony\\component\\finder\\iterator\\multiplepcrefilteriterator' => '/../symfony/finder/Symfony/Component/Finder/Iterator/MultiplePcreFilterIterator.php',
);
    // }}}

    // deps {{{
    static $deps    = array (
  'symfony\\component\\finder\\tests\\iterator\\sizerangefilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\sortableiteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\recursivedirectoryiteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\filetypefilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\filenamefilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\filecontentfilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\filteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\testmultiplepcrefilteriterator' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\iterator\\filteriterator',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\iterator\\multiplepcrefilteriterator',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\excludedirectoryfilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\depthrangefilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\customfilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
  ),
  'symfony\\component\\finder\\tests\\iterator\\daterangefilteriteratortest' => 
  array (
    0 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\iteratortestcase',
      1 => 'class_exists',
    ),
    1 => 
    array (
      0 => 'symfony\\component\\finder\\tests\\iterator\\realiteratortestcase',
      1 => 'class_exists',
    ),
  ),
);
    // }}}

    if (isset($classes[$class])) {
        if (!empty($deps[$class])) {
            foreach ($deps[$class] as $zclass) {
                if (is_array($zclass)) {
                    if (!$zclass[1]($zclass[0], false)) {
                        require __DIR__  . $classes[$zclass[0]];
                    }
                } else if (!class_exists($zclass, false)) {
                    require __DIR__  . $classes[$zclass];
                }
            }
        }
        if (is_array($class)) {
            if (!$class[1]($class[0], false)) {
                require __DIR__  . $classes[$class[0]];
            }
        } else if (!class_exists($class, false)) {
            require __DIR__  . $classes[$class];
        }
        return true;
    }
};
